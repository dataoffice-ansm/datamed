# Definition
directive @uppercase on FIELD_DEFINITION
directive @lowercase on FIELD_DEFINITION
directive @capitalize on FIELD_DEFINITION

type IndicatorValues {
  value: Int
  valuePercent: Int
}

type WithRepartition {
  with: IndicatorValues
  without: IndicatorValues
}

type RepartitionRange {
  id: Int
  range: String
  value: Int
  valuePercent: Int
}

type RepartitionPerSeriousEffect {
  range: String
  value: Int
  valuePercent: Int
}

type Meta {
  count: Int
}

type Icon {
  id: Int!
  name: String
}

type PublicationType {
  id: Int
  name: String
}

type Publication {
  id: Int!
  name: String!
  type: PublicationType
  link: String
}

type PharmaForm {
  id: Int!
  name: String
}

type Laboratory {
  id: Int!
  name: String
}

type MedicalError {
  name: String
}

type MedicalATC {
  id: Int!
  code: String
  name: String
}

type MedicalErrors {
  populationRepartition: [RepartitionRange]
  sideEffectsOriginRepartition: WithRepartition
  apparitionStepRepartition: [RepartitionRange]
  natureRepartition: [RepartitionRange]
}

type CisExposition {
  id: Int!
  consumption: Int
  expositionLevel: Int
}

type RuptureClass {
  id: Int!
  name: String
}

type RuptureCause {
  id: Int!
  name: String
}

type SpecialityRupture {
  id: Int!
  num: String
  name: String
  active: Boolean
  cause: RuptureCause
  classification: RuptureClass
  date: String
}

type SpecialityRupturesHistory {
  ruptures: [SpecialityRupture]
  meta: Meta
}

type HltEffect {
  id: Int!
  range: String
  value: Int
  valuePercent: Int
}

type RepartitionPerGender {
  male: IndicatorValues
  female: IndicatorValues
}

type RepartitionPerNotifier {
  id: Int!
  job: String
  value: Int
  valuePercent: Int
}

type GlobStaticRepartitionPerNotifier {
  job: String
  value: Int
  valuePercent: Int
}

type RepartitionPerPathology {
  id: Int!
  subId: Int!
  range: String
  value: Int
  valuePercent: Int
  htlEffects: [HltEffect]
}

type GlobStaticRepartitionPerPathology {
  id: Int!
  range: String
  value: Int
  valuePercent: Int
}

type RepartitionPerGravity {
  range: String
  value: Int
  valuePercent: Int
}

type TotalExposition {
  total: Int!
  minYear: Int
  maxYear: Int
}

type RuptureTotalExposition {
  total: Int!
  year: Int
  ruptureExpositions: [RuptureExposition]
}

type RuptureExposition {
  range: String
  value: Int
  valuePercent: Int
}

type Substance {
  id: Int!
  code: String!
  name: String! @capitalize
  retrieveSpecialities: SpecialitiesReturn
  repartitionPerGender: RepartitionPerGender
  repartitionPerAge: [RepartitionRange]
  repartitionPerNotifier: [RepartitionPerNotifier]
  repartitionPerPathology: [RepartitionPerPathology]
  totalExposition: TotalExposition
  exposition: CisExposition
}

type SpecialitySubstance {
  id: Int!
  code: String!
  name: String!
  dosage: String
}

type Speciality {
  id: Int!
  code: String!
  name: String!
  atc: MedicalATC
  icon: Icon
  dosageIndication: String
  substances: [Substance]
  dosageSubstances: [SpecialitySubstance]
  pharmaForm: PharmaForm
  description: String
  commercialisationState: String @capitalize
  commercialisationType: String @capitalize
  laboratory: Laboratory @capitalize
  repartitionPerGender: RepartitionPerGender
  repartitionPerAge: [RepartitionRange]
  exposition: CisExposition
  medicalErrors: MedicalErrors
  publications: [Publication]
  rupturesHistory: SpecialityRupturesHistory
}

type SpecialityLight {
  id: Int!
  code: String!
  name: String!
  description: String
  exposition: CisExposition
}

type GlobalStatistic {
  totalExposition: TotalExposition
  repartitionPerGender: RepartitionPerGender
  repartitionPerAge: [RepartitionRange]
  repartitionPerSeriousEffect: [RepartitionPerSeriousEffect]
  repartitionPerPathology: [GlobStaticRepartitionPerPathology]
  repartitionPerNotifier: [GlobStaticRepartitionPerNotifier]
  repartitionPerGravity: [RepartitionPerGravity]
}

type RuptureYear {
  value: Int
}

type RuptureStock {
  year: Int
  total: Int
  nbRisque: Int
  nbRupture: Int
  nbRisqueClosed: Int
  nbRuptureClosed: Int
}

type RuptureStockRepartitionPerClassication {
  year: Int
  classification: String
  value: Int
}

type RuptureStockRepartionPerClassTherapeutique {
  name: String
  value: Int
  totalCis: Int
}

type RuptureStockRepartionPerClassTherapeutiques {
  year: Int
  repartitions: [RuptureStockRepartionPerClassTherapeutique]
  total: Int
}

type Cause {
  range: String
  value: Int
}

type RuptureRepartitionPerCause {
  causes: [Cause]
  year: Int
  total: Int
}

type RuptureTotalAction {
  year: Int
  total: Int
  totalWithOneAction: Int
}

type RuptureAction {
  range: String
  value: Int
}

type RuptureRepartitionPerAction {
  year: Int
  actions: [RuptureAction]
  total: Int
}

type GlobalRupture {
  ruptureStocks: [RuptureStock]
  repartitionPerClassication: [RuptureStockRepartitionPerClassication]
  ruptureYears: [RuptureYear]
  repartitionPerClassTherapeutique: [RuptureStockRepartionPerClassTherapeutiques]
  repartitionPerCause: [RuptureRepartitionPerCause]
  totalAction: [RuptureTotalAction]
  repartitionPerAction: [RuptureRepartitionPerAction]
}

##### QUERIES #####

type SpecialitiesReturn {
  specialities: [SpecialityLight]
  meta: Meta
}

type SubstancesReturn {
  substances: [Substance]
  meta: Meta
}

type Query {
  getSpecialityIdByCode(cisCode: String!): Int
  getSpeciality(cisCode: String!): Speciality
  getSpecialities: SpecialitiesReturn
  getSubstance(subCode: String!): Substance
  getSubstances: SubstancesReturn
  getGlobalStatistic: GlobalStatistic
  getGlobalRupture: GlobalRupture
}

type LoginResult {
    token: String
}

type Mutation {
    login(username: String, password: String): LoginResult
}
