# Definition
directive @uppercase on FIELD_DEFINITION
directive @lowercase on FIELD_DEFINITION
directive @capitalize on FIELD_DEFINITION

enum MedicalErrorApparitionStep {
    PREPARATION_STEP
    DELIVERANCE_STEP
    PRESCRIPTION_STEP
    ADMINISTRATION_STEP
    SURVEILLANCE_STEP
    OTHER_STEP
}

enum PharmaFormType {
    COLLYRE
    COMPRIME
    CREME
    LIQUIDE
    GAZ
    GRANULE
    GELULE
    PLANTE
    POUDRE
    IMPLANT
    SERINGUE
    PANSEMENT
    SIROP
    SUPOSITOIRE
    SPRAY
    MULTI
    AUTRE
}

enum MedicalErrorNature {
    PREPARATION_ERROR
    DELIVERANCE_ERROR
    ADMINISTRATION_ERROR
    PRESCRIPTION_ERROR
    THERAPEUTIC_CARE_ERROR,
    OTHER_ERROR,
}

type IndicatorValues {
    value: Int!
    valuePercent: Float!
}

type WithRepartition {
    with: IndicatorValues
    without: IndicatorValues
}

type GlobalStatsUsagePerSeriousEffect {
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type Meta {
    count: Int
}

type PublicationType {
    id: Int
    name: String @capitalize
}

type Publication {
    id: Int!
    name: String! @capitalize
    type: PublicationType
    link: String
}

type PharmaForm {
    id: Int!
    type: String!
    label: String! @capitalize
}

type Laboratory {
    id: Int!
    name: String @capitalize
}

type MedicalError {
    name: String @capitalize
}

type MedicalATC {
    id: Int!
    code: String
    name: String @capitalize
}

type MedicalErrorsPopulation {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type MedicalErrorsApparitionStep {
    id: Int!
    step: String!
    label: String!
    value: Int!
    valuePercent: Float!
    description: String

}

type MedicalErrorsNature {
    id: Int!
    nature: String!
    value: Int!
    valuePercent: Float!
}

type MedicalErrors {
    populationRepartition: [MedicalErrorsPopulation]
    sideEffectsOriginRepartition: WithRepartition
    apparitionStepRepartition: [MedicalErrorsApparitionStep]
    natureRepartition: [MedicalErrorsNature]
}

type RuptureClass {
    id: Int!
    label: String @capitalize
}

type SpecialityRuptureCause {
    id: Int!
    type: String @capitalize
}

type SpecialityRupture {
    id: Int!
    num: String
    name: String @capitalize
    active: Boolean
    cause: SpecialityRuptureCause @capitalize
    classification: RuptureClass
    date: String
}

type SpecialityRupturesHistory {
    ruptures: [SpecialityRupture]
    meta: Meta
}

type HltEffect {
    id: Int!
    socId: Int!
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type RepartitionPerGender {
    male: IndicatorValues
    female: IndicatorValues
}

type RepartitionPerNotifier {
    id: Int!
    job: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type GlobalStatsUsagePerNotifier {
    id: Int!
    job: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type RepartitionPerPathology {
    id: Int!
    subId: Int!
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    htlEffects: [HltEffect]
}

type GlobalStatsUsagePerPathology {
    id: Int!
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type GlobalStatsUsagePerGravity {
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type RepartitionPerAge {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type SubstanceSideEffectsDeclarations {
    total: Int!
}

type SubstanceSideEffects {
    declarations: SubstanceSideEffectsDeclarations
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [RepartitionPerAge]
    repartitionPerNotifier: [RepartitionPerNotifier]
    repartitionPerPathology: [RepartitionPerPathology]
}

type EntityExpositionPeriod {
    consumption: Int!
    level: String!
    description: String!
    minYear: String!
    maxYear: String!
}

type Substance {
    id: Int!
    code: String!
    name: String! @capitalize
    exposition: EntityExpositionPeriod
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [RepartitionPerAge]
    sideEffects: SubstanceSideEffects
    retrievedSpecialities: SpecialitiesReturn
}

type SpecialitySubstance {
    id: Int!
    code: String!
    name: String! @capitalize
    dosage: String
}

type SpecialityUsagePerAge {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type Speciality {
    id: Int!
    code: String!
    name: String! @capitalize
    atc: MedicalATC
    dosageIndication: String
    substances: [Substance]
    dosageSubstances: [SpecialitySubstance]
    pharmaForm: PharmaForm
    commercialisationState: String @capitalize
    commercialisationType: String @capitalize
    laboratory: Laboratory @capitalize
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [SpecialityUsagePerAge]
    exposition: EntityExpositionPeriod
    medicalErrors: MedicalErrors
    publications: [Publication]
    rupturesHistory: SpecialityRupturesHistory
}

type SpecialityLight {
    id: Int!
    code: String!
    name: String! @capitalize
}

type GlobalStatsUsagePerAge {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type GlobalExpositionPeriod {
    consumption: Int!
    minYear: Int!
    maxYear: Int!
}

type GlobalStatistic {
    exposition: GlobalExpositionPeriod
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [GlobalStatsUsagePerAge]
    repartitionPerSeriousEffect: [GlobalStatsUsagePerSeriousEffect]
    repartitionPerPathology: [GlobalStatsUsagePerPathology]
    repartitionPerNotifier: [GlobalStatsUsagePerNotifier]
    repartitionPerGravity: [GlobalStatsUsagePerGravity]
}

type RuptureStock {
    year: String!
    nbDeclarations: Int
    nbRisque: Int
    nbRupture: Int
    nbRisqueClosed: Int
    nbRuptureClosed: Int
}

type RuptureClassificationRepartition {
    year: String!
    classification: String
    value: Int
}

type TherapeuticClassRupture {
    atcId: Int!
    atcName: String!
    value: Int
    totalCis: Int
}

type TherapeuticClassesRupturesPerYear {
    year: String!
    repartition: [TherapeuticClassRupture]
    total: Int
}

type RuptureCauseRepartitionCause {
    range: String!
    value: Int!
    description: String
}

type RuptureCauseRepartition {
    year: String!
    causes: [RuptureCauseRepartitionCause]
    total: Int
}

type TotalDeclarationsWithMeasure {
    value: Int!
    valuePercent: Float!
}

type RupturesTotalActionPerYear {
    year: String!
    totalDeclarationsWithMeasure: TotalDeclarationsWithMeasure
    totalMeasures: Int
}

type RuptureAction {
    range: String!
    value: Int!
    description: String
}

type RuptureActionRepartition {
    year: String!
    actions: [RuptureAction]
    total: Int
}

type GlobalRupturesConfig {
    minYear: String!
    maxYear: String!
}

type GlobalRuptures {
    config: GlobalRupturesConfig
    ruptureStocks: [RuptureStock]
    ruptureYears: [String!]!
    repartitionPerClassification: [RuptureClassificationRepartition]
    repartitionPerTherapeuticClass: [TherapeuticClassesRupturesPerYear]
    repartitionPerCause: [RuptureCauseRepartition]
    repartitionPerAction: [RuptureActionRepartition]
    totalActions: [RupturesTotalActionPerYear]
}

##### QUERIES #####

type SpecialitiesReturn {
    specialities: [SpecialityLight]
    meta: Meta
}

type SubstancesReturn {
    substances: [Substance]
    meta: Meta
}

type Query {
    getSpeciality(cisCode: String!): Speciality
    getSpecialities: SpecialitiesReturn
    getSubstance(subCode: String!): Substance
    getSubstances: SubstancesReturn
    getGlobalStatistic: GlobalStatistic
    getGlobalRuptures: GlobalRuptures
}

type LoginResult {
    token: String
}

type Mutation {
    login(username: String, password: String): LoginResult
}
