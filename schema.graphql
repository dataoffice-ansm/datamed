# Definition
directive @uppercase on FIELD_DEFINITION
directive @lowercase on FIELD_DEFINITION
directive @capitalize on FIELD_DEFINITION

enum MedicalErrorApparitionStep {
    PREPARATION_STEP
    DELIVERANCE_STEP
    PRESCRIPTION_STEP
    ADMINISTRATION_STEP
    SURVEILLANCE_STEP
    OTHER_STEP
}

enum PharmaFormType {
    COLLYRE
    COMPRIME
    CREME
    LIQUIDE
    GAZ
    GRANULE
    GELULE
    PLANTE
    POUDRE
    IMPLANT
    SERINGUE
    PANSEMENT
    SIROP
    SUPOSITOIRE
    SPRAY
    MULTI
    AUTRE
}

enum MedicalErrorNature {
    PREPARATION_ERROR
    DELIVERANCE_ERROR
    ADMINISTRATION_ERROR
    PRESCRIPTION_ERROR
    THERAPEUTIC_CARE_ERROR,
    OTHER_ERROR,
}

type IndicatorValues {
    value: Int!
    valuePercent: Float!
}

type WithRepartition {
    with: IndicatorValues
    without: IndicatorValues
}

type GlobalStatsUsagePerSeriousEffect {
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type Meta {
    count: Int
}

type PublicationType {
    id: Int
    name: String @capitalize
}

type Publication {
    id: Int!
    name: String! @capitalize
    type: PublicationType
    link: String
}

type PharmaForm {
    id: Int!
    type: String!
    label: String! @capitalize
}

type Laboratory {
    id: Int!
    name: String @capitalize
}

type MedicalError {
    name: String @capitalize
}

type MedicalATC {
    id: Int!
    code: String
    name: String @capitalize
}

type MedicalErrorsPopulation {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type MedicalErrorsApparitionStep {
    id: Int!
    step: String!
    label: String!
    value: Int!
    valuePercent: Float!
    description: String

}

type MedicalErrorsNature {
    id: Int!
    nature: String!
    value: Int!
    valuePercent: Float!
}

type MedicalErrors {
    populationRepartition: [MedicalErrorsPopulation]
    sideEffectsOriginRepartition: WithRepartition
    apparitionStepRepartition: [MedicalErrorsApparitionStep]
    natureRepartition: [MedicalErrorsNature]
}

type SpecialityRuptureCause {
    type: String @capitalize
    definition: String @capitalize
}

type SpecialityAssociatedShortage {
    cisId: Int!
    cisCode: String
    cisName: String @capitalize

    num: String
    state: String
    date: String
    year: Int
    name: String

    cause: SpecialityRuptureCause
    classification:  String @capitalize
}

type SpecialityRupturesHistory {
    shortages: [SpecialityAssociatedShortage!]
    meta: Meta
}

type HltEffect {
    id: Int!
    socId: Int!
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type RepartitionPerGender {
    male: IndicatorValues
    female: IndicatorValues
}

type RepartitionPerNotifier {
    id: Int!
    job: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type GlobalStatsUsagePerNotifier {
    id: Int!
    job: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type RepartitionPerPathology {
    id: Int!
    subId: Int!
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    htlEffects: [HltEffect]
}

type GlobalStatsUsagePerPathology {
    id: Int!
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type GlobalStatsUsagePerGravity {
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
}

type RepartitionPerAge {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type SubstanceSideEffectsDeclarations {
    total: Int!
}

type SubstanceSideEffects {
    declarations: SubstanceSideEffectsDeclarations
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [RepartitionPerAge]
    repartitionPerNotifier: [RepartitionPerNotifier]
    repartitionPerPathology: [RepartitionPerPathology]
}

type EntityExpositionPeriod {
    minYear: Int!
    maxYear: Int!
    consumption: Int
    level: String
    description: String
}

type Substance {
    id: Int!
    code: String!
    name: String! @capitalize
    exposition: EntityExpositionPeriod
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [RepartitionPerAge]
    sideEffects: SubstanceSideEffects
    retrievedSpecialities: SpecialitiesReturn
}

type SpecialitySubstance {
    id: Int!
    code: String!
    name: String! @capitalize
    dosage: String
}

type SpecialityUsagePerAge {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type Speciality {
    id: Int!
    code: String!
    name: String! @capitalize
    atc: MedicalATC
    dosageIndication: String
    substances: [Substance]
    dosageSubstances: [SpecialitySubstance]
    pharmaForm: PharmaForm
    commercialisationState: String @capitalize
    commercialisationType: String @capitalize
    laboratory: Laboratory @capitalize
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [SpecialityUsagePerAge]
    exposition: EntityExpositionPeriod
    medicalErrors: MedicalErrors
    publications: [Publication]
    shortagesHistory: SpecialityRupturesHistory
}

type SpecialityLight {
    id: Int!
    code: String!
    name: String! @capitalize
}

type GlobalStatsUsagePerAge {
    id: Int
    range: String! @capitalize
    value: Int!
    valuePercent: Float!
    description: String
}

type GlobalExpositionPeriod {
    consumption: Int
    minYear: Int!
    maxYear: Int!
}

type GlobalStatistics {
    exposition: GlobalExpositionPeriod
    repartitionPerGender: RepartitionPerGender
    repartitionPerAge: [GlobalStatsUsagePerAge]
    repartitionPerSeriousEffect: [GlobalStatsUsagePerSeriousEffect]
    repartitionPerPathology: [GlobalStatsUsagePerPathology]
    repartitionPerNotifier: [GlobalStatsUsagePerNotifier]
    repartitionPerGravity: [GlobalStatsUsagePerGravity]
}

type TotalDeclarationsWithMeasure {
    value: Int!
    valuePercent: Float!
}

type RupturesTotalActionPerYear {
    year: Int!
    totalDeclarationsWithMeasure: TotalDeclarationsWithMeasure
    totalMeasures: Int
}

type GlobalShortagesPeriod {
    minDate: String!
    maxDate: String!
}

type ShortagesPerYear {
    year: Int!
    reportsCount: Int
    actionsCount: Int
    actionsCountPercent: Float
}

type declarationsWithActionsCountShortagesPerYear {
    year: Int!
    reportsCount: Int
    actionsCount: Int
    actionsCountPercent: Float
}

type ShortagesClassPerYear {
    year: Int!
    value: Int
    valuePercentClosed: Float
    classification: String
}

type ShortagesActionsPerYear {
    year: Int!
    declarationsCount: Int,
    declarationsWithActionsCount: Int,
    declarationsWithActionsPercent: Float,
    actionsCount: Int,
}

type ShortagesAtcPerYear {
    year: Int!
    reportsCount: Int
    medicsCount: Int
    code: String
    label: String
}

type ShortagesCausesPerYear {
    year: Int!
    value: Int
    valuePercent: Float
    type: String
    definition: String
}

type ShortagesMeasuresPerYear {
    year: Int!
    value: Int,
    valuePercent: Float,
    type: String,
    definition: String,
}

type GlobalShortages {
    period: GlobalShortagesPeriod
    shortagesPerYear: [ShortagesPerYear!]
    shortagesClassesPerYear: [ShortagesClassPerYear!]
    shortagesCausesPerYear: [ShortagesCausesPerYear!]
    shortagesAtcPerYear: [ShortagesAtcPerYear!]
    shortagesMeasuresPerYear: [ShortagesMeasuresPerYear!]
}

##### QUERIES #####

type SpecialitiesReturn {
    specialities: [SpecialityLight]
    meta: Meta
}

type SubstancesReturn {
    substances: [Substance]
    meta: Meta
}

type Query {
    getSpeciality(cisCode: String!): Speciality
    getSpecialities: SpecialitiesReturn
    getSubstance(subCode: String!): Substance
    getSubstances: SubstancesReturn
    getGlobalShortages: GlobalShortages
    getGlobalStatistics: GlobalStatistics
}

type LoginResult {
    token: String
}

type Mutation {
    login(username: String, password: String): LoginResult
}
